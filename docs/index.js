// Generated by purs bundle 0.14.0
var PS = {};
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function($PS) {
  
  // SPDX-License-Identifier: MIT
  // Copyright (c) 2021 Chua Hou
  //
  // Representation of a winning mahjong hand. Does not include kokushi musou, as
  // the focus is on training scoring (scoring kokushi musou is easy but will be
  // bloat here).
  "use strict";
  $PS["Mahjong.Hand"] = $PS["Mahjong.Hand"] || {};
  var exports = $PS["Mahjong.Hand"];
  var Data_Show = $PS["Data.Show"];                

  // Tiles --
  // | Types of tiles.
  var Manzu = (function () {
      function Manzu(value0) {
          this.value0 = value0;
      };
      Manzu.create = function (value0) {
          return new Manzu(value0);
      };
      return Manzu;
  })();

  // Tiles --
  // | Types of tiles.
  var Pinzu = (function () {
      function Pinzu(value0) {
          this.value0 = value0;
      };
      Pinzu.create = function (value0) {
          return new Pinzu(value0);
      };
      return Pinzu;
  })();

  // Tiles --
  // | Types of tiles.
  var Souzu = (function () {
      function Souzu(value0) {
          this.value0 = value0;
      };
      Souzu.create = function (value0) {
          return new Souzu(value0);
      };
      return Souzu;
  })();

  // Tiles --
  // | Types of tiles.
  var East = (function () {
      function East() {

      };
      East.value = new East();
      return East;
  })();

  // Tiles --
  // | Types of tiles.
  var South = (function () {
      function South() {

      };
      South.value = new South();
      return South;
  })();

  // Tiles --
  // | Types of tiles.
  var West = (function () {
      function West() {

      };
      West.value = new West();
      return West;
  })();

  // Tiles --
  // | Types of tiles.
  var North = (function () {
      function North() {

      };
      North.value = new North();
      return North;
  })();

  // Tiles --
  // | Types of tiles.
  var White = (function () {
      function White() {

      };
      White.value = new White();
      return White;
  })();

  // Tiles --
  // | Types of tiles.
  var Green = (function () {
      function Green() {

      };
      Green.value = new Green();
      return Green;
  })();

  // Tiles --
  // | Types of tiles.
  var Red = (function () {
      function Red() {

      };
      Red.value = new Red();
      return Red;
  })();

  // | Successor function of tile number.
  var succTile$prime = function (v) {
      if (v === 9) {
          return 1;
      };
      return v + 1 | 0;
  };

  // | Successor function of tiles (e.g. for dora).
  var succTile = function (v) {
      if (v instanceof Manzu) {
          return new Manzu(succTile$prime(v.value0));
      };
      if (v instanceof Pinzu) {
          return new Pinzu(succTile$prime(v.value0));
      };
      if (v instanceof Souzu) {
          return new Souzu(succTile$prime(v.value0));
      };
      if (v instanceof East) {
          return South.value;
      };
      if (v instanceof South) {
          return West.value;
      };
      if (v instanceof West) {
          return North.value;
      };
      if (v instanceof North) {
          return East.value;
      };
      if (v instanceof White) {
          return Green.value;
      };
      if (v instanceof Green) {
          return Red.value;
      };
      if (v instanceof Red) {
          return White.value;
      };
      throw new Error("Failed pattern match at Mahjong.Hand (line 68, column 1 - line 68, column 25): " + [ v.constructor.name ]);
  };
  var showTile = new Data_Show.Show(function (v) {
      if (v instanceof Manzu) {
          return Data_Show.show(Data_Show.showInt)(v.value0) + "m";
      };
      if (v instanceof Pinzu) {
          return Data_Show.show(Data_Show.showInt)(v.value0) + "p";
      };
      if (v instanceof Souzu) {
          return Data_Show.show(Data_Show.showInt)(v.value0) + "s";
      };
      if (v instanceof East) {
          return "1z";
      };
      if (v instanceof South) {
          return "2z";
      };
      if (v instanceof West) {
          return "3z";
      };
      if (v instanceof North) {
          return "4z";
      };
      if (v instanceof White) {
          return "5z";
      };
      if (v instanceof Green) {
          return "6z";
      };
      if (v instanceof Red) {
          return "7z";
      };
      throw new Error("Failed pattern match at Mahjong.Hand (line 36, column 1 - line 46, column 24): " + [ v.constructor.name ]);
  });
  exports["Manzu"] = Manzu;
  exports["succTile"] = succTile;
  exports["showTile"] = showTile;
})(PS);
(function($PS) {
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Data_Show = $PS["Data.Show"];
  var Effect_Console = $PS["Effect.Console"];
  var Mahjong_Hand = $PS["Mahjong.Hand"];                
  var main = Effect_Console.log(Data_Show.show(Mahjong_Hand.showTile)(Mahjong_Hand.succTile(new Mahjong_Hand.Manzu(3))));
  exports["main"] = main;
})(PS);
PS["Main"].main();