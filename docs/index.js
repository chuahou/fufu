// Generated by purs bundle 0.14.0
var PS = {};
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];            
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];    
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["join"] = join;
  exports["bindArray"] = bindArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.foreach = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (a) {
    return function (ref) {
      return function () {
        return ref.value = a; // eslint-disable-line no-return-assign
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];          
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["modify"] = modify;
  exports["functorST"] = functorST;
  exports["applicativeST"] = applicativeST;
  exports["foreach"] = $foreign.foreach;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortByImpl = (function () {
    function mergeFromTo(compare, fromOrdering, xs1, xs2, from, to) {
      var mid;
      var i;
      var j;
      var k;
      var x;
      var y;
      var c;

      mid = from + ((to - from) >> 1);
      if (mid - from > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, from, mid);
      if (to - mid > 1) mergeFromTo(compare, fromOrdering, xs2, xs1, mid, to);

      i = from;
      j = mid;
      k = from;
      while (i < mid && j < to) {
        x = xs2[i];
        y = xs2[j];
        c = fromOrdering(compare(x)(y));
        if (c > 0) {
          xs1[k++] = y;
          ++j;
        }
        else {
          xs1[k++] = x;
          ++i;
        }
      }
      while (i < mid) {
        xs1[k++] = xs2[i++];
      }
      while (j < to) {
        xs1[k++] = xs2[j++];
      }
    }

    return function (compare) {
      return function (fromOrdering) {
        return function (xs) {
          var out;

          if (xs.length < 2) return xs;

          out = xs.slice(0);
          mergeFromTo(compare, fromOrdering, out, xs.slice(0), 0, xs.length);

          return out;
        };
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return [];
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.unsafeFreeze = function (xs) {
    return function () {
      return xs;
    };
  };

  exports.unsafeThaw = function (xs) {
    return function () {
      return xs;
    };
  };

  function copyImpl(xs) {
    return function () {
      return xs.slice();
    };
  }
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["push"] = push;
  exports["new"] = $foreign["new"];
  exports["unsafeFreeze"] = $foreign.unsafeFreeze;
  exports["unsafeThaw"] = $foreign.unsafeThaw;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["tt"] = tt;
  exports["conj"] = conj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                         
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Array.ST.Iterator"] = $PS["Data.Array.ST.Iterator"] || {};
  var exports = $PS["Data.Array.ST.Iterator"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var Iterator = (function () {
      function Iterator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iterator.create = function (value0) {
          return function (value1) {
              return new Iterator(value0, value1);
          };
      };
      return Iterator;
  })();
  var peek = function (v) {
      return function __do() {
          var i = Control_Monad_ST_Internal.read(v.value1)();
          return v.value0(i);
      };
  };
  var next = function (v) {
      return function __do() {
          var i = Control_Monad_ST_Internal.read(v.value1)();
          Control_Monad_ST_Internal.modify(function (v1) {
              return v1 + 1 | 0;
          })(v.value1)();
          return v.value0(i);
      };
  };
  var pushWhile = function (p) {
      return function (iter) {
          return function (array) {
              return function __do() {
                  var $$break = Control_Monad_ST_Internal["new"](false)();
                  while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                      (function __do() {
                          var mx = peek(iter)();
                          if (mx instanceof Data_Maybe.Just && p(mx.value0)) {
                              Data_Array_ST.push(mx.value0)(array)();
                              return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(next(iter))();
                          };
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                      })();
                  };
                  return {};
              };
          };
      };
  };                                                    
  var iterator = function (f) {
      return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
  };
  var iterate = function (iter) {
      return function (f) {
          return function __do() {
              var $$break = Control_Monad_ST_Internal["new"](false)();
              while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                  (function __do() {
                      var mx = next(iter)();
                      if (mx instanceof Data_Maybe.Just) {
                          return f(mx.value0)();
                      };
                      if (mx instanceof Data_Maybe.Nothing) {
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                      };
                      throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [ mx.constructor.name ]);
                  })();
              };
              return {};
          };
      };
  };
  exports["iterator"] = iterator;
  exports["iterate"] = iterate;
  exports["pushWhile"] = pushWhile;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;   

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  };                                           
  var eqInt = new Eq($foreign.eqIntImpl);  
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqInt"] = eqInt;
  exports["eqArray"] = eqArray;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var Data_Eq = $PS["Data.Eq"];                    
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                                                                                 
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var comparing = function (dictOrd) {
      return function (f) {
          return function (x) {
              return function (y) {
                  return compare(dictOrd)(f(x))(f(y));
              };
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["comparing"] = comparing;
  exports["ordInt"] = ordInt;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = $PS["Data.Array.ST.Iterator"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var sortBy = function (comp) {
      return $foreign.sortByImpl(comp)(function (v) {
          if (v instanceof Data_Ordering.GT) {
              return 1;
          };
          if (v instanceof Data_Ordering.EQ) {
              return 0;
          };
          if (v instanceof Data_Ordering.LT) {
              return -1 | 0;
          };
          throw new Error("Failed pattern match at Data.Array (line 831, column 31 - line 834, column 11): " + [ v.constructor.name ]);
      });
  };
  var sortWith = function (dictOrd) {
      return function (f) {
          return sortBy(Data_Ord.comparing(dictOrd)(f));
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var nubBy = function (comp) {
      return function (xs) {
          var indexedAndSorted = sortBy(function (x) {
              return function (y) {
                  return comp(Data_Tuple.snd(x))(Data_Tuple.snd(y));
              };
          })(mapWithIndex(Data_Tuple.Tuple.create)(xs));
          var v = head(indexedAndSorted);
          if (v instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(sortWith(Data_Ord.ordInt)(Data_Tuple.fst)((function __do() {
                  var result = Data_Array_ST.unsafeThaw(singleton(v.value0))();
                  Control_Monad_ST_Internal.foreach(indexedAndSorted)(function (v1) {
                      return function __do() {
                          var lst = Data_Functor.map(Control_Monad_ST_Internal.functorST)((function () {
                              var $102 = (function (dictPartial) {
                                  var $104 = Data_Maybe.fromJust();
                                  return function ($105) {
                                      return $104(last($105));
                                  };
                              })();
                              return function ($103) {
                                  return Data_Tuple.snd($102($103));
                              };
                          })())(Data_Array_ST.unsafeFreeze(result))();
                          return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(Data_Eq.notEq(Data_Ordering.eqOrdering)(comp(lst)(v1.value1))(Data_Ordering.EQ.value))(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v1)(result)))();
                      };
                  })();
                  return Data_Array_ST.unsafeFreeze(result)();
              })()));
          };
          throw new Error("Failed pattern match at Data.Array (line 1050, column 17 - line 1058, column 29): " + [ v.constructor.name ]);
      };
  };
  var nub = function (dictOrd) {
      return nubBy(Data_Ord.compare(dictOrd));
  };
  var groupBy = function (op) {
      return function (xs) {
          return (function __do() {
              var result = Data_Array_ST["new"]();
              var iter = Data_Array_ST_Iterator.iterator(function (v) {
                  return index(xs)(v);
              })();
              Data_Array_ST_Iterator.iterate(iter)(function (x) {
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(function __do() {
                      var sub = Data_Array_ST["new"]();
                      Data_Array_ST.push(x)(sub)();
                      Data_Array_ST_Iterator.pushWhile(op(x))(iter)(sub)();
                      var grp = Data_Array_ST.unsafeFreeze(sub)();
                      return Data_Array_ST.push(grp)(result)();
                  });
              })();
              return Data_Array_ST.unsafeFreeze(result)();
          })();
      };
  };
  var group = function (dictEq) {
      return function (xs) {
          return groupBy(Data_Eq.eq(dictEq))(xs);
      };
  };
  var cons = function (x) {
      return function (xs) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ x ])(xs);
      };
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  exports["cons"] = cons;
  exports["head"] = head;
  exports["index"] = index;
  exports["concatMap"] = concatMap;
  exports["sort"] = sort;
  exports["group"] = group;
  exports["nub"] = nub;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Monoid.Conj"] = $PS["Data.Monoid.Conj"] || {};
  var exports = $PS["Data.Monoid.Conj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["monoidConj"] = monoidConj;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var alaF = function (dictCoercible) {
      return function (dictCoercible1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return Safe_Coerce.coerce();
                  };
              };
          };
      };
  };
  exports["alaF"] = alaF;
})(PS);
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["add"] = add;
  exports["zero"] = zero;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var $$null = function (dictFoldable) {
      return foldr(dictFoldable)(function (v) {
          return function (v1) {
              return false;
          };
      })(true);
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var length = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(function (c) {
              return function (v) {
                  return Data_Semiring.add(dictSemiring)(Data_Semiring.one(dictSemiring))(c);
              };
          })(Data_Semiring.zero(dictSemiring));
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["all"] = all;
  exports["null"] = $$null;
  exports["length"] = length;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Array.NonEmpty.Internal"] = $PS["Data.Array.NonEmpty.Internal"] || {};
  var exports = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Foldable = $PS["Data.Foldable"];                                          
  var foldableNonEmptyArray = Data_Foldable.foldableArray;
  exports["foldableNonEmptyArray"] = foldableNonEmptyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";               

  exports.isFinite = isFinite;
})(PS["Data.Number"] = PS["Data.Number"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Number"] = $PS["Data.Number"] || {};
  var exports = $PS["Data.Number"];
  var $foreign = $PS["Data.Number"];
  exports["isFinite"] = $foreign["isFinite"];
})(PS);
(function(exports) {
  "use strict";          

  exports.floor = Math.floor;

  function nativeImul(a) {
    return function (b) {
      return Math.imul(a, b);
    };
  }

  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul
  function emulatedImul(a) {
    /*jshint bitwise: false*/
    return function (b) {
      var ah = a >>> 16 & 0xffff;
      var al = a & 0xffff;
      var bh = b >>> 16 & 0xffff;
      var bl = b & 0xffff;
      // the shift by 0 fixes the sign on the high part
      // the final |0 converts the unsigned value into a signed value
      return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
    };
  }
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["floor"] = $foreign.floor;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Number = $PS["Data.Number"];
  var $$Math = $PS["Math"];         
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (!Data_Number["isFinite"](x)) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["floor"] = floor;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */

  "use strict";          

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];                                   
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };
  var monadEffectEffect = new MonadEffect(function () {
      return Effect.monadEffect;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.error = function (s) {
    return function () {
      console.error(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["error"] = $foreign.error;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Class.Console"] = $PS["Effect.Class.Console"] || {};
  var exports = $PS["Effect.Class.Console"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var error = function (dictMonadEffect) {
      var $40 = Effect_Class.liftEffect(dictMonadEffect);
      return function ($41) {
          return $40(Effect_Console.error($41));
      };
  };
  exports["error"] = error;
})(PS);
(function(exports) {
  "use strict";

  exports.random = Math.random;
})(PS["Effect.Random"] = PS["Effect.Random"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Effect.Random"] = $PS["Effect.Random"] || {};
  var exports = $PS["Effect.Random"];
  var $foreign = $PS["Effect.Random"];
  var Data_Int = $PS["Data.Int"];
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var n = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * n + Data_Int.toNumber(low);
              return Data_Int.floor(asNumber);
          };
      };
  };
  exports["randomInt"] = randomInt;
  exports["random"] = $foreign.random;
})(PS);
(function($PS) {
  
  // SPDX-License-Identifier: MIT
  // Copyright (c) 2021 Chua Hou
  //
  // Representation of a winning mahjong hand. Does not include kokushi musou, as
  // the focus is on training scoring (scoring kokushi musou is easy but will be
  // bloat here).
  "use strict";
  $PS["Mahjong.Hand"] = $PS["Mahjong.Hand"] || {};
  var exports = $PS["Mahjong.Hand"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Array_NonEmpty_Internal = $PS["Data.Array.NonEmpty.Internal"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Tuple = $PS["Data.Tuple"];                

  // Tiles --
  // | Types of tiles.
  var Manzu = (function () {
      function Manzu(value0) {
          this.value0 = value0;
      };
      Manzu.create = function (value0) {
          return new Manzu(value0);
      };
      return Manzu;
  })();

  // Tiles --
  // | Types of tiles.
  var Pinzu = (function () {
      function Pinzu(value0) {
          this.value0 = value0;
      };
      Pinzu.create = function (value0) {
          return new Pinzu(value0);
      };
      return Pinzu;
  })();

  // Tiles --
  // | Types of tiles.
  var Souzu = (function () {
      function Souzu(value0) {
          this.value0 = value0;
      };
      Souzu.create = function (value0) {
          return new Souzu(value0);
      };
      return Souzu;
  })();

  // Tiles --
  // | Types of tiles.
  var East = (function () {
      function East() {

      };
      East.value = new East();
      return East;
  })();

  // Tiles --
  // | Types of tiles.
  var South = (function () {
      function South() {

      };
      South.value = new South();
      return South;
  })();

  // Tiles --
  // | Types of tiles.
  var West = (function () {
      function West() {

      };
      West.value = new West();
      return West;
  })();

  // Tiles --
  // | Types of tiles.
  var North = (function () {
      function North() {

      };
      North.value = new North();
      return North;
  })();

  // Tiles --
  // | Types of tiles.
  var White = (function () {
      function White() {

      };
      White.value = new White();
      return White;
  })();

  // Tiles --
  // | Types of tiles.
  var Green = (function () {
      function Green() {

      };
      Green.value = new Green();
      return Green;
  })();

  // Tiles --
  // | Types of tiles.
  var Red = (function () {
      function Red() {

      };
      Red.value = new Red();
      return Red;
  })();

  // Tatsu --
  // | A tatsu to be completed into mentsu with the winning tile.
  var Ryanmen = (function () {
      function Ryanmen(value0) {
          this.value0 = value0;
      };
      Ryanmen.create = function (value0) {
          return new Ryanmen(value0);
      };
      return Ryanmen;
  })();

  // Tatsu --
  // | A tatsu to be completed into mentsu with the winning tile.
  var Penchan = (function () {
      function Penchan(value0) {
          this.value0 = value0;
      };
      Penchan.create = function (value0) {
          return new Penchan(value0);
      };
      return Penchan;
  })();

  // Tatsu --
  // | A tatsu to be completed into mentsu with the winning tile.
  var Kanchan = (function () {
      function Kanchan(value0) {
          this.value0 = value0;
      };
      Kanchan.create = function (value0) {
          return new Kanchan(value0);
      };
      return Kanchan;
  })();

  // Tatsu --
  // | A tatsu to be completed into mentsu with the winning tile.
  var Shanpon = (function () {
      function Shanpon(value0) {
          this.value0 = value0;
      };
      Shanpon.create = function (value0) {
          return new Shanpon(value0);
      };
      return Shanpon;
  })();

  // Mentsu --
  // | A single complete mentsu.
  var Shuntsu = (function () {
      function Shuntsu(value0) {
          this.value0 = value0;
      };
      Shuntsu.create = function (value0) {
          return new Shuntsu(value0);
      };
      return Shuntsu;
  })();

  // Mentsu --
  // | A single complete mentsu.
  var Kotsu = (function () {
      function Kotsu(value0) {
          this.value0 = value0;
      };
      Kotsu.create = function (value0) {
          return new Kotsu(value0);
      };
      return Kotsu;
  })();

  // Mentsu --
  // | A single complete mentsu.
  var Kantsu = (function () {
      function Kantsu(value0) {
          this.value0 = value0;
      };
      Kantsu.create = function (value0) {
          return new Kantsu(value0);
      };
      return Kantsu;
  })();

  // | Winning mahjong hand.
  var Hand = (function () {
      function Hand(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Hand.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Hand(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Hand;
  })();

  // | Winning mahjong hand.
  var Tanki = (function () {
      function Tanki(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Tanki.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Tanki(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Tanki;
  })();

  // | Winning mahjong hand.
  var Chiitoi = (function () {
      function Chiitoi(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Chiitoi.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Chiitoi(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Chiitoi;
  })();

  // | Convert Tile to a number for easy ordering/equality.
  var tileNo = function (v) {
      if (v instanceof Manzu) {
          return v.value0;
      };
      if (v instanceof Pinzu) {
          return 9 + v.value0 | 0;
      };
      if (v instanceof Souzu) {
          return 18 + v.value0 | 0;
      };
      if (v instanceof East) {
          return 28;
      };
      if (v instanceof South) {
          return 29;
      };
      if (v instanceof West) {
          return 30;
      };
      if (v instanceof North) {
          return 31;
      };
      if (v instanceof White) {
          return 32;
      };
      if (v instanceof Green) {
          return 33;
      };
      if (v instanceof Red) {
          return 34;
      };
      throw new Error("Failed pattern match at Mahjong.Hand (line 49, column 1 - line 49, column 22): " + [ v.constructor.name ]);
  };

  // | Successor function of tile number.
  var succTile$prime = function (v) {
      if (v === 9) {
          return 1;
      };
      return v + 1 | 0;
  };

  // | Successor function of tiles (e.g. for dora).
  var succTile = function (v) {
      if (v instanceof Manzu) {
          return new Manzu(succTile$prime(v.value0));
      };
      if (v instanceof Pinzu) {
          return new Pinzu(succTile$prime(v.value0));
      };
      if (v instanceof Souzu) {
          return new Souzu(succTile$prime(v.value0));
      };
      if (v instanceof East) {
          return South.value;
      };
      if (v instanceof South) {
          return West.value;
      };
      if (v instanceof West) {
          return North.value;
      };
      if (v instanceof North) {
          return East.value;
      };
      if (v instanceof White) {
          return Green.value;
      };
      if (v instanceof Green) {
          return Red.value;
      };
      if (v instanceof Red) {
          return White.value;
      };
      throw new Error("Failed pattern match at Mahjong.Hand (line 62, column 1 - line 62, column 25): " + [ v.constructor.name ]);
  };

  // | Returns an array of tiles in a tatsu. Assumes tatsu is valid.
  var tatsuToArray = function (v) {
      if (v instanceof Ryanmen) {
          return [ v.value0, succTile(v.value0) ];
      };
      if (v instanceof Penchan) {
          return [ v.value0, succTile(v.value0) ];
      };
      if (v instanceof Kanchan) {
          return [ v.value0, succTile(succTile(v.value0)) ];
      };
      if (v instanceof Shanpon) {
          return [ v.value0, v.value0 ];
      };
      throw new Error("Failed pattern match at Mahjong.Hand (line 161, column 1 - line 161, column 36): " + [ v.constructor.name ]);
  };                                       

  // | Returns an array of tiles in a mentsu. Assumes mentsu is valid.
  var mentsuToArray = function (v) {
      if (v instanceof Shuntsu) {
          return [ v.value0, succTile(v.value0), succTile(succTile(v.value0)) ];
      };
      if (v instanceof Kotsu) {
          return Data_Array.replicate(3)(v.value0);
      };
      if (v instanceof Kantsu) {
          return Data_Array.replicate(4)(v.value0);
      };
      throw new Error("Failed pattern match at Mahjong.Hand (line 129, column 1 - line 129, column 38): " + [ v.constructor.name ]);
  };

  // | @maybeNumber f t@ runs @f@ on the suit constructor and number of @t@ if @t@
  // | is a number tile, returning @Just@ of the result, and returning @Nothing@
  // | for word tiles.
  var maybeNumber = function (v) {
      return function (v1) {
          if (v1 instanceof Manzu) {
              return Data_Maybe.Just.create(v(Manzu.create)(v1.value0));
          };
          if (v1 instanceof Pinzu) {
              return Data_Maybe.Just.create(v(Pinzu.create)(v1.value0));
          };
          if (v1 instanceof Souzu) {
              return Data_Maybe.Just.create(v(Souzu.create)(v1.value0));
          };
          return Data_Maybe.Nothing.value;
      };
  };

  // | Checks if a number is valid.
  var isTile$prime = function (n) {
      return n >= 1 && n <= 9;
  };

  // | Checks if a tile is valid.
  var isTile = function (v) {
      if (v instanceof Manzu) {
          return isTile$prime(v.value0);
      };
      if (v instanceof Pinzu) {
          return isTile$prime(v.value0);
      };
      if (v instanceof Souzu) {
          return isTile$prime(v.value0);
      };
      return true;
  };

  // | Checks if a shuntsu is valid.
  var isShuntsu = function (x) {
      return x >= 1 && x <= 7;
  };

  // | Checks if a mentsu is valid.
  var isMentsu = function (v) {
      if (v instanceof Shuntsu && v.value0 instanceof Manzu) {
          return isShuntsu(v.value0.value0);
      };
      if (v instanceof Shuntsu && v.value0 instanceof Pinzu) {
          return isShuntsu(v.value0.value0);
      };
      if (v instanceof Shuntsu && v.value0 instanceof Souzu) {
          return isShuntsu(v.value0.value0);
      };
      if (v instanceof Kotsu) {
          return isTile(v.value0);
      };
      if (v instanceof Kantsu) {
          return isTile(v.value0);
      };
      return false;
  };
  var eqTile = new Data_Eq.Eq(function (t1) {
      return function (t2) {
          return tileNo(t1) === tileNo(t2);
      };
  });
  var ordTile = new Data_Ord.Ord(function () {
      return eqTile;
  }, function (t1) {
      return function (t2) {
          return Data_Ord.compare(Data_Ord.ordInt)(tileNo(t1))(tileNo(t2));
      };
  });

  // | Create a closed mentsu.
  var closed = Data_Tuple.Tuple.create(false);

  // | Checks if a tatsu is valid, returning @Just ws@ where @ws@ are the winning
  // | tiles if so, and @Nothing@ otherwise.
  var checkTatsu = function (v) {
      if (v instanceof Ryanmen) {
          var go = function (suit) {
              return function (n) {
                  if (n >= 2 && n <= 7) {
                      return Data_Maybe.Just.create(Data_Functor.map(Data_Functor.functorArray)(suit)([ n - 1 | 0, n + 2 | 0 ]));
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Mahjong.Hand (line 147, column 5 - line 148, column 43): " + [ suit.constructor.name, n.constructor.name ]);
              };
          };
          return Control_Bind.join(Data_Maybe.bindMaybe)(maybeNumber(go)(v.value0));
      };
      if (v instanceof Penchan) {
          var go = function (suit) {
              return function (n) {
                  if (n === 1) {
                      return new Data_Maybe.Just([ suit(3) ]);
                  };
                  if (n === 8) {
                      return new Data_Maybe.Just([ suit(7) ]);
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Mahjong.Hand (line 151, column 5 - line 153, column 36): " + [ suit.constructor.name, n.constructor.name ]);
              };
          };
          return Control_Bind.join(Data_Maybe.bindMaybe)(maybeNumber(go)(v.value0));
      };
      if (v instanceof Kanchan) {
          var go = function (suit) {
              return function (n) {
                  if (n >= 1 && n <= 7) {
                      return new Data_Maybe.Just([ suit(n + 1 | 0) ]);
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Mahjong.Hand (line 156, column 5 - line 157, column 43): " + [ suit.constructor.name, n.constructor.name ]);
              };
          };
          return Control_Bind.join(Data_Maybe.bindMaybe)(maybeNumber(go)(v.value0));
      };
      if (v instanceof Shanpon) {
          return new Data_Maybe.Just([ v.value0 ]);
      };
      throw new Error("Failed pattern match at Mahjong.Hand (line 144, column 1 - line 144, column 42): " + [ v.constructor.name ]);
  };

  // | Gets tiles occuring in a hand as a array.
  var handToArray = function (v) {
      if (v instanceof Hand) {
          return Data_Array.concat([ Data_Array.concatMap(function ($124) {
              return mentsuToArray(Data_Tuple.snd($124));
          })([ v.value1, v.value2, v.value3 ]), [ v.value4, v.value4 ], tatsuToArray(v.value0), (function () {
              var v1 = checkTatsu(v.value0);
              if (v1 instanceof Data_Maybe.Just) {
                  return v1.value0;
              };
              if (v1 instanceof Data_Maybe.Nothing) {
                  return [  ];
              };
              throw new Error("Failed pattern match at Mahjong.Hand (line 209, column 5 - line 211, column 26): " + [ v1.constructor.name ]);
          })() ]);
      };
      if (v instanceof Tanki) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.concatMap(function ($125) {
              return mentsuToArray(Data_Tuple.snd($125));
          })([ v.value0, v.value1, v.value2, v.value3 ]))([ v.value4, v.value4 ]);
      };
      if (v instanceof Chiitoi) {
          return Data_Array.concatMap(Data_Array.replicate(2))([ v.value0, v.value1, v.value2, v.value3, v.value4, v.value5, v.value6 ]);
      };
      throw new Error("Failed pattern match at Mahjong.Hand (line 204, column 1 - line 204, column 34): " + [ v.constructor.name ]);
  }; 

  // | Check that no tile in the given list occurs more than four times.
  var checkCounts = (function () {
      var $126 = Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)((function () {
          var $130 = Data_Foldable.length(Data_Array_NonEmpty_Internal.foldableNonEmptyArray)(Data_Semiring.semiringInt);
          return function ($131) {
              return (function (v) {
                  return v <= 4;
              })($130($131));
          };
      })());
      var $127 = Data_Array.group(eqTile);
      var $128 = Data_Array.sort(ordTile);
      return function ($129) {
          return $126($127($128($129)));
      };
  })();

  // | Checks if a hand is valid.
  var isHand = function (h) {
      return checkCounts(handToArray(h)) && (function () {
          if (h instanceof Hand) {
              return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function ($132) {
                  return isMentsu(Data_Tuple.snd($132));
              })([ h.value1, h.value2, h.value3 ]) && (isTile(h.value4) && Data_Maybe.isJust(checkTatsu(h.value0)));
          };
          if (h instanceof Tanki) {
              return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function ($133) {
                  return isMentsu(Data_Tuple.snd($133));
              })([ h.value0, h.value1, h.value2, h.value3 ]) && isTile(h.value4);
          };
          if (h instanceof Chiitoi) {
              return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(isTile)([ h.value0, h.value1, h.value2, h.value3, h.value4, h.value5, h.value6 ]);
          };
          throw new Error("Failed pattern match at Mahjong.Hand (line 198, column 3 - line 201, column 62): " + [ h.constructor.name ]);
      })();
  };
  exports["Manzu"] = Manzu;
  exports["Pinzu"] = Pinzu;
  exports["Souzu"] = Souzu;
  exports["East"] = East;
  exports["South"] = South;
  exports["West"] = West;
  exports["North"] = North;
  exports["White"] = White;
  exports["Green"] = Green;
  exports["Red"] = Red;
  exports["maybeNumber"] = maybeNumber;
  exports["Shuntsu"] = Shuntsu;
  exports["Kotsu"] = Kotsu;
  exports["Kantsu"] = Kantsu;
  exports["mentsuToArray"] = mentsuToArray;
  exports["Ryanmen"] = Ryanmen;
  exports["Penchan"] = Penchan;
  exports["Kanchan"] = Kanchan;
  exports["Shanpon"] = Shanpon;
  exports["checkTatsu"] = checkTatsu;
  exports["tatsuToArray"] = tatsuToArray;
  exports["closed"] = closed;
  exports["Hand"] = Hand;
  exports["Tanki"] = Tanki;
  exports["Chiitoi"] = Chiitoi;
  exports["isHand"] = isHand;
  exports["eqTile"] = eqTile;
  exports["ordTile"] = ordTile;
})(PS);
(function($PS) {
  
  // SPDX-License-Identifier: MIT
  // Copyright (c) 2021 Chua Hou
  "use strict";
  $PS["Mahjong.Gen"] = $PS["Mahjong.Gen"] || {};
  var exports = $PS["Mahjong.Gen"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect = $PS["Effect"];
  var Effect_Random = $PS["Effect.Random"];
  var Mahjong_Hand = $PS["Mahjong.Hand"];                

  // | Randomly picks an element from the given array
  var genFromList = function ($copy_xs) {
      return function __do() {
          var $tco_var_xs = $copy_xs;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(xs) {
              var i = Effect_Random.randomInt(0)(Data_Array.length(xs) - 1 | 0)();
              var v = Data_Array.index(xs)(i);
              if (v instanceof Data_Maybe.Just) {
                  $tco_done = true;
                  return v.value0;
              };
              if (v instanceof Data_Maybe.Nothing) {
                  $tco_var_xs = xs;
                  return;
              };
              throw new Error("Failed pattern match at Mahjong.Gen (line 34, column 26 - line 36, column 45): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_xs);
          };
          return $tco_result;
      };
  };

  // | Generates a random penchan tatsu.
  var genPenchan = (function () {
      var f = function (suit) {
          return [ suit(1), suit(8) ];
      };
      return Data_Functor.map(Effect.functorEffect)(Mahjong_Hand.Penchan.create)(genFromList(Data_Array.concatMap(f)([ Mahjong_Hand.Manzu.create, Mahjong_Hand.Pinzu.create, Mahjong_Hand.Souzu.create ])));
  })();

  // Basic Generators --
  // | One of each possible tile.
  var allTiles = Data_Array.concat([ Data_Functor.map(Data_Functor.functorArray)(Mahjong_Hand.Manzu.create)(Data_Array.range(1)(9)), Data_Functor.map(Data_Functor.functorArray)(Mahjong_Hand.Pinzu.create)(Data_Array.range(1)(9)), Data_Functor.map(Data_Functor.functorArray)(Mahjong_Hand.Souzu.create)(Data_Array.range(1)(9)), [ Mahjong_Hand.East.value, Mahjong_Hand.South.value, Mahjong_Hand.West.value, Mahjong_Hand.North.value, Mahjong_Hand.White.value, Mahjong_Hand.Green.value, Mahjong_Hand.Red.value ] ]);

  // | Generates a random tile.
  var genTile = genFromList(allTiles);

  // | Generates a chiitoi hand.
  var genChiitoi = function __do() {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop() {
          var a = genTile();
          var b = genTile();
          var c = genTile();
          var d = genTile();
          var e = genTile();
          var f = genTile();
          var g = genTile();
          var xs = [ a, b, c, d, e, f, g ];
          var riichi = Data_Functor.map(Effect.functorEffect)(function (v) {
              return v < 0.8;
          })(Effect_Random.random)();
          var $5 = Data_Eq.notEq(Data_Eq.eqArray(Mahjong_Hand.eqTile))(Data_Array.nub(Mahjong_Hand.ordTile)(xs))(xs);
          if ($5) {
              return;
          };
          $tco_done = true;
          return Data_Tuple.Tuple.create(riichi)(new Mahjong_Hand.Chiitoi(a, b, c, d, e, f, g));
      };
      while (!$tco_done) {
          $tco_result = $tco_loop();
      };
      return $tco_result;
  };

  // | Generates a random kantsu.
  var genKantsu = Data_Functor.map(Effect.functorEffect)(Mahjong_Hand.Kantsu.create)(genTile);

  // | Generates a random kotsu.
  var genKotsu = Data_Functor.map(Effect.functorEffect)(Mahjong_Hand.Kotsu.create)(genTile);

  // | Generates a random shanpon tatsu.
  var genShanpon = Data_Functor.map(Effect.functorEffect)(Mahjong_Hand.Shanpon.create)(genTile);

  // | Possible number tiles from @low@ to @high@ (inclusive).
  var rangeTiles = function (a) {
      return function (b) {
          var p = function (t) {
              return Data_Maybe.isJust(Mahjong_Hand.maybeNumber(function (v) {
                  return function (n) {
                      return n >= a && n <= b;
                  };
              })(t));
          };
          return Data_Array.filter(p)(allTiles);
      };
  };

  // | Generates a random kanchan tatsu.
  var genKanchan = Data_Functor.map(Effect.functorEffect)(Mahjong_Hand.Kanchan.create)(genFromList(rangeTiles(1)(7)));

  // Tatsu Generators --
  // | Generates a random ryanmen tatsu.
  var genRyanmen = Data_Functor.map(Effect.functorEffect)(Mahjong_Hand.Ryanmen.create)(genFromList(rangeTiles(2)(7)));

  // | Generates a random tatsu with probability proportional to parameter to
  // | @replicate@.
  var genTatsu = Control_Bind.join(Effect.bindEffect)(genFromList(Data_Array.concat([ Data_Array.replicate(6)(genRyanmen), Data_Array.replicate(3)(genKanchan), Data_Array.replicate(2)(genPenchan), Data_Array.replicate(2)(genShanpon) ])));

  // Mentsu Generators --
  // | Generates a random shuntsu.
  var genShuntsu = Data_Functor.map(Effect.functorEffect)(Mahjong_Hand.Shuntsu.create)(genFromList(rangeTiles(1)(7)));

  // | Generates a random mentsu.
  // | The number of occurrences in the list is the relative probability of each
  // | occurring.
  var genMentsu = Control_Bind.join(Effect.bindEffect)(genFromList(Data_Array.concat([ [ genKantsu ], Data_Array.replicate(5)(genKotsu), Data_Array.replicate(10)(genShuntsu) ])));

  // Hand Generators --
  // | Generates a random riichi hand.
  var genRiichi = function __do() {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop() {
          var m1 = Data_Functor.map(Effect.functorEffect)(Mahjong_Hand.closed)(genMentsu)();
          var m2 = Data_Functor.map(Effect.functorEffect)(Mahjong_Hand.closed)(genMentsu)();
          var m3 = Data_Functor.map(Effect.functorEffect)(Mahjong_Hand.closed)(genMentsu)();
          var a = genTile();
          var x = Effect_Random.random();
          var $6 = x < 0.8;
          if ($6) {
              var tt = genTatsu();
              var hand = Data_Tuple.Tuple.create(true)(new Mahjong_Hand.Hand(tt, m1, m2, m3, a));
              var $7 = Mahjong_Hand.isHand(Data_Tuple.snd(hand));
              if ($7) {
                  $tco_done = true;
                  return hand;
              };
              return;
          };
          var m4 = Data_Functor.map(Effect.functorEffect)(Mahjong_Hand.closed)(genMentsu)();
          var hand = Data_Tuple.Tuple.create(true)(new Mahjong_Hand.Tanki(m1, m2, m3, m4, a));
          var $8 = Mahjong_Hand.isHand(Data_Tuple.snd(hand));
          if ($8) {
              $tco_done = true;
              return hand;
          };
          return;
      };
      while (!$tco_done) {
          $tco_result = $tco_loop();
      };
      return $tco_result;
  };

  // | Generates a hand, with lower probability of chiitoi.
  var genHand = Control_Bind.join(Effect.bindEffect)(genFromList(Data_Array.concat([ Data_Array.replicate(1)(genChiitoi), Data_Array.replicate(10)(genRiichi) ])));
  exports["genHand"] = genHand;
})(PS);
(function(exports) {
  "use strict";

  exports.create = function () {
    return new Image();
  };

  exports.setSrc = function (src) {
    return function (image) {
      return function () {
        image.src = src;
      };
    };
  };
})(PS["Web.HTML.HTMLImageElement"] = PS["Web.HTML.HTMLImageElement"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLImageElement"] = $PS["Web.HTML.HTMLImageElement"] || {};
  var exports = $PS["Web.HTML.HTMLImageElement"];
  var $foreign = $PS["Web.HTML.HTMLImageElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                   
  var toNode = Unsafe_Coerce.unsafeCoerce;
  exports["toNode"] = toNode;
  exports["create"] = $foreign.create;
  exports["setSrc"] = $foreign.setSrc;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Render"] = $PS["Render"] || {};
  var exports = $PS["Render"];
  var Data_Show = $PS["Data.Show"];
  var Mahjong_Hand = $PS["Mahjong.Hand"];
  var Web_HTML_HTMLImageElement = $PS["Web.HTML.HTMLImageElement"];                
  var tileToFilename = function (t) {
      var go = function (v) {
          if (v instanceof Mahjong_Hand.Manzu) {
              return "Man" + Data_Show.show(Data_Show.showInt)(v.value0);
          };
          if (v instanceof Mahjong_Hand.Pinzu) {
              return "Pin" + Data_Show.show(Data_Show.showInt)(v.value0);
          };
          if (v instanceof Mahjong_Hand.Souzu) {
              return "Sou" + Data_Show.show(Data_Show.showInt)(v.value0);
          };
          if (v instanceof Mahjong_Hand.East) {
              return "Ton";
          };
          if (v instanceof Mahjong_Hand.South) {
              return "Nan";
          };
          if (v instanceof Mahjong_Hand.West) {
              return "Shaa";
          };
          if (v instanceof Mahjong_Hand.North) {
              return "Pei";
          };
          if (v instanceof Mahjong_Hand.White) {
              return "Haku";
          };
          if (v instanceof Mahjong_Hand.Green) {
              return "Hatsu";
          };
          if (v instanceof Mahjong_Hand.Red) {
              return "Chun";
          };
          throw new Error("Failed pattern match at Render (line 17, column 5 - line 17, column 35): " + [ v.constructor.name ]);
      };
      return go(t) + ".svg";
  };
  var createImage = function (t) {
      var fname = "./riichi-mahjong-tiles/Regular/" + tileToFilename(t);
      return function __do() {
          var elem = Web_HTML_HTMLImageElement.create();
          Web_HTML_HTMLImageElement.setSrc(fname)(elem)();
          return Web_HTML_HTMLImageElement.toNode(elem);
      };
  };
  exports["createImage"] = createImage;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.Document"] = $PS["Web.DOM.Document"] || {};
  var exports = $PS["Web.DOM.Document"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                      
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  exports["toParentNode"] = toParentNode;
})(PS);
(function(exports) {
  "use strict";

  exports.setAttribute = function (name) {
    return function (value) {
      return function (element) {
        return function () {
          element.setAttribute(name, value);
        };
      };
    };
  };
})(PS["Web.DOM.Element"] = PS["Web.DOM.Element"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.Element"] = $PS["Web.DOM.Element"] || {};
  var exports = $PS["Web.DOM.Element"];
  var $foreign = $PS["Web.DOM.Element"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                   
  var toNode = Unsafe_Coerce.unsafeCoerce;
  exports["toNode"] = toNode;
  exports["setAttribute"] = $foreign.setAttribute;
})(PS);
(function(exports) {
  "use strict";

  exports.appendChild = function (node) {
    return function (parent) {
      return function () {
        parent.appendChild(node);
      };
    };
  };
})(PS["Web.DOM.Node"] = PS["Web.DOM.Node"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.Node"] = $PS["Web.DOM.Node"] || {};
  var exports = $PS["Web.DOM.Node"];
  var $foreign = $PS["Web.DOM.Node"];
  exports["appendChild"] = $foreign.appendChild;
})(PS);
(function(exports) {
  "use strict";                                               

  exports._querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };
})(PS["Web.DOM.ParentNode"] = PS["Web.DOM.ParentNode"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.DOM.ParentNode"] = $PS["Web.DOM.ParentNode"] || {};
  var exports = $PS["Web.DOM.ParentNode"];
  var $foreign = $PS["Web.DOM.ParentNode"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var querySelector = function (qs) {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $1 = $foreign["_querySelector"](qs);
      return function ($2) {
          return $0($1($2));
      };
  };
  exports["querySelector"] = querySelector;
})(PS);
(function(exports) {
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];      
  var toDocument = Unsafe_Coerce.unsafeCoerce;
  exports["toDocument"] = toDocument;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.14.0
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  exports["document"] = $foreign.document;
})(PS);
(function($PS) {
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Class_Console = $PS["Effect.Class.Console"];
  var Mahjong_Gen = $PS["Mahjong.Gen"];
  var Mahjong_Hand = $PS["Mahjong.Hand"];
  var Render = $PS["Render"];
  var Web_DOM_Document = $PS["Web.DOM.Document"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var Web_DOM_Node = $PS["Web.DOM.Node"];
  var Web_DOM_ParentNode = $PS["Web.DOM.ParentNode"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                

  // | @RenderHand ts ns a@ is a hand to be rendered with drawn tiles @ts@, called
  // | tiles @ns@ and winning tile @a@.
  var RenderHand = (function () {
      function RenderHand(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RenderHand.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RenderHand(value0, value1, value2);
              };
          };
      };
      return RenderHand;
  })();
  var toRenderHand = function (v) {
      var goTanki = function (a) {
          return function (v1) {
              return Data_Maybe.Just.create(new RenderHand(Data_Array.cons(a)(v1.value0), v1.value1, a));
          };
      };
      var goHand = function (tt) {
          return function (a) {
              return function (v1) {
                  var v2 = Control_Bind.join(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Array.head)(Mahjong_Hand.checkTatsu(tt)));
                  if (v2 instanceof Data_Maybe.Just) {
                      return Data_Maybe.Just.create(new RenderHand(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.cons(a)(Data_Array.cons(a)(Mahjong_Hand.tatsuToArray(tt))))(v1.value0), v1.value1, v2.value0));
                  };
                  return Data_Maybe.Nothing.value;
              };
          };
      };
      var go = function (v1) {
          return function (v2) {
              if (v1 instanceof Mahjong_Hand.Kantsu) {
                  return new Data_Tuple.Tuple(v2.value0, Data_Semigroup.append(Data_Semigroup.semigroupArray)(v2.value1)(Mahjong_Hand.mentsuToArray(v1)));
              };
              return new Data_Tuple.Tuple(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v2.value0)(Mahjong_Hand.mentsuToArray(v1)), v2.value1);
          };
      };
      var splitKans = Data_Foldable.foldr(Data_Foldable.foldableArray)(go)(new Data_Tuple.Tuple([  ], [  ]));
      if (v.value1 instanceof Mahjong_Hand.Hand) {
          return goHand(v.value1.value0)(v.value1.value4)(splitKans(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)([ v.value1.value1, v.value1.value2, v.value1.value3 ])));
      };
      if (v.value1 instanceof Mahjong_Hand.Tanki) {
          return goTanki(v.value1.value4)(splitKans(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)([ v.value1.value0, v.value1.value1, v.value1.value2, v.value1.value3 ])));
      };
      if (v.value1 instanceof Mahjong_Hand.Chiitoi) {
          return Data_Maybe.Just.create(new RenderHand(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.concatMap(Data_Array.replicate(2))([ v.value1.value0, v.value1.value1, v.value1.value2, v.value1.value3, v.value1.value4, v.value1.value5 ]))([ v.value1.value6 ]), [  ], v.value1.value6));
      };
      throw new Error("Failed pattern match at Main (line 28, column 33 - line 32, column 63): " + [ v.value1.constructor.name ]);
  };
  var main = (function () {
      var addImg = function (d) {
          return function (e) {
              return function (x) {
                  return function __do() {
                      var v = e();
                      return Control_Bind.bind(Effect.bindEffect)(Render.createImage(x))(Data_Function.flip(Web_DOM_Node.appendChild)(Web_DOM_Element.toNode(d)))();
                  };
              };
          };
      };
      return function __do() {
          var riichiHand = Mahjong_Gen.genHand();
          var maybeRenderHand = toRenderHand(riichiHand);
          var v = (function () {
              if (maybeRenderHand instanceof Data_Maybe.Just) {
                  return maybeRenderHand.value0;
              };
              if (maybeRenderHand instanceof Data_Maybe.Nothing) {
                  var v = Effect_Class_Console.error(Effect_Class.monadEffectEffect)("Invalid hand generated")();
                  return new RenderHand([  ], [  ], Mahjong_Hand.East.value);
              };
              throw new Error("Failed pattern match at Main (line 48, column 33 - line 51, column 84): " + [ maybeRenderHand.constructor.name ]);
          })();
          var doc = Data_Functor.map(Effect.functorEffect)(function ($64) {
              return Web_DOM_Document.toParentNode(Web_HTML_HTMLDocument.toDocument($64));
          })(Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.document))();
          var query = function (q) {
              return Web_DOM_ParentNode.querySelector(q)(doc);
          };
          (function __do() {
              var x = query("#hand")();
              if (x instanceof Data_Maybe.Just) {
                  return Data_Foldable.foldl(Data_Foldable.foldableArray)(addImg(x.value0))(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(Data_Array.sort(Mahjong_Hand.ordTile)(v.value0))();
              };
              return Data_Unit.unit;
          })();
          (function __do() {
              var x = query("#naki")();
              if (x instanceof Data_Maybe.Just) {
                  var $54 = Data_Foldable["null"](Data_Foldable.foldableArray)(v.value1);
                  if ($54) {
                      return Web_DOM_Element.setAttribute("style")("display:none")(x.value0)();
                  };
                  return Data_Foldable.foldl(Data_Foldable.foldableArray)(addImg(x.value0))(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(Data_Array.sort(Mahjong_Hand.ordTile)(v.value1))();
              };
              return Data_Unit.unit;
          })();
          (function __do() {
              var x = query("#agari")();
              if (x instanceof Data_Maybe.Just) {
                  return Control_Bind.bind(Effect.bindEffect)(Render.createImage(v.value2))(Data_Function.flip(Web_DOM_Node.appendChild)(Web_DOM_Element.toNode(x.value0)))();
              };
              return Data_Unit.unit;
          })();
          var x = query("#riibou")();
          if (x instanceof Data_Maybe.Just) {
              var $59 = Data_Tuple.fst(riichiHand);
              if ($59) {
                  return Web_DOM_Element.setAttribute("style")("visibility:visible")(x.value0)();
              };
              return Data_Unit.unit;
          };
          if (x instanceof Data_Maybe.Nothing) {
              return Data_Unit.unit;
          };
          throw new Error("Failed pattern match at Main (line 75, column 29 - line 79, column 25): " + [ x.constructor.name ]);
      };
  })();
  exports["main"] = main;
})(PS);
PS["Main"].main();